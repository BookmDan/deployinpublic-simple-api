name: Deploy
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."
          command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${{ secrets.INSTANCE_ID_1 }},${{ secrets.INSTANCE_ID_2 }}" \
            --comment "Deploy Docker container" \
            --parameters commands='[
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY",
              "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "docker run -d -p 3000:3000 -e DB_HOST=${{ secrets.DB_HOST }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e ENVIRONMENT=production --name api $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            ]' \
            --query 'Command.CommandId' \
            --output text)

          echo "Waiting for command to complete..."
          aws ssm wait command-executed --command-id $command_id --instance-id ${{ secrets.INSTANCE_ID_1 }}
          aws ssm wait command-executed --command-id $command_id --instance-id ${{ secrets.INSTANCE_ID_2 }}
          
          for instance_id in "${{ secrets.INSTANCE_ID_1 }}" "${{ secrets.INSTANCE_ID_2 }}"; do
            status=$(aws ssm list-command-invocations \
              --command-id $command_id \
              --instance-id $instance_id \
              --query "CommandInvocations[0].Status" \
              --output text)
            echo "Instance $instance_id status: $status"
            if [ "$status" != "Success" ]; then
              echo "Fetching command invocation details for instance $instance_id"
              aws ssm list-command-invocations \
                --command-id $command_id \
                --instance-id $instance_id \
                --details \
                --output json | jq -r '.CommandInvocations[0].CommandPlugins[].Output'
              echo "Command failed on instance $instance_id"
              exit 1
            fi
          done
          echo "Command executed successfully on all instances"