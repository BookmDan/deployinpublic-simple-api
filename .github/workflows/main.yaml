name: Deploy
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  # build:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest  
  #   steps:  
  #       - name: Checkout
  #         uses: actions/checkout@v2    
  #       - name: Configure AWS Credentials 
  #         uses: aws-actions/configure-aws-credentials@v4
  #         with:
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-region: ${{secrets.AWS_REGION}}
  #       - name: Log into AWS ECR
  #         id: login-aws-ecr
  #         uses: aws-actions/amazon-ecr-login@v2
  #         with:
  #           region: ${{ secrets.AWS_REGION }}
  #           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #       - name: Build and Push Image to ECR
  #         env:
  #           ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
  #           ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
  #           IMAGE_TAG: latest
  #         run: |
  #           echo "ECR_REGISTRY=${ECR_REGISTRY}"
  #           echo "ECR_REPOSITORY=${ECR_REPOSITORY}"
  #           echo "IMAGE_TAG=${IMAGE_TAG}"
  #           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    # needs: build
    steps: 
        - name: Configure AWS Credentials 
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
          with:
            region: ${{ secrets.AWS_REGION }}
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        - name: Deploy to EC2
          run: |
            command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=i-079b8a960de1eb7e7,i-03e076b90fc93fcb1" \
            --comment "Pull Docker image and run it" \
            --parameters commands='["aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-aws-ecr.outputs.registry }}"]' \
            --query 'Command.CommandId' \
            --output text)

            aws ssm wait command-executed \
            --command-id $command_id \
            --instance-id i-079b8a960de1eb7e7 || true 

            aws ssm wait command-executed \
            --command-id $command_id \
            --instance-id i-03e076b90fc93fcb1 || true 

            status=$(aws ssm list-command-invocations \
            --command-id $command_id \
            --details \
            --query "CommandInvocations[0].StatusDetails" \
            --output text)

            # echo "$status"

            if [ $status == "Success" ]; then
              echo "Command executed successfully"
            else 
              echo "Command failed"
              exit 1
            fi
          
