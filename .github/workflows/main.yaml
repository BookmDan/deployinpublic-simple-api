name: Deploy
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "Deploying to EC2..."
      - name: Pull and Run Docker Image from ECR
        run: |
          command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceIds,Values=${{ secrets.INSTANCE_ID_1 }},${{ secrets.INSTANCE_ID_2 }}" \
          --comment "Deploy Docker container" \
          --parameters commands='[
            "echo \"RDS Endpoint: ${{ secrets.DB_HOST }}\"",
            "echo \"Checking EC2 DNS resolution...\"",
            "nslookup ${{ secrets.DB_HOST }}",
            "echo \"Checking EC2 connection to RDS...\"",
            "nc -zv ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT }}",
            "export ECR_REGISTRY='${{ steps.login-aws-ecr.outputs.registry }}'",
            "export ECR_REPOSITORY='${{ secrets.AWS_ECR_REPO }}'",
            "export BACKEND_IMAGE_TAG='backend-${{ github.sha }}'",
            "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY",
            "echo ECR_REGISTRY=$ECR_REGISTRY",
            "echo ECR_REPOSITORY=$ECR_REPOSITORY",
            "echo BACKEND_IMAGE_TAG=$BACKEND_IMAGE_TAG",
            "sudo systemctl restart docker",
            "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG",
            "docker stop api || true",
            "docker rm api || true",
            "docker run -d --name api -p 80:3005 -e NODE_ENV=production -e DB_HOST=${{ secrets.DB_HOST }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME=${{ secrets.DB_NAME }} -e DISABLE_DB=false -e DB_SSL=true $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG",
            "echo \"Checking Docker container environment...\"",
            "docker exec api env | grep DB_",
            "echo \"Checking Docker container DNS resolution...\"",
            "docker exec api nslookup ${{ secrets.DB_HOST }}",
            "echo \"Checking Docker container connection to RDS...\"",
            "docker exec api nc -zv ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT }}",
            "echo \"Docker container logs:\"",
            "docker logs api"
          ]' \
          --query "Command.CommandId" \
          --output text)
          echo "Command ID: $command_id"
          echo "command_id=$command_id" >> $GITHUB_ENV

          echo ${{ env.command_id}}
          echo "Waiting for command to complete..."
      - name: Waiting for Docker Commands to Complete on Instance 1
        run: |
          aws ssm wait command-executed --command-id ${{ env.command_id}} --instance-id ${{ secrets.INSTANCE_ID_1 }}
      - name: Waiting for Docker Commands to Complete on Instance 2
        run: |
          aws ssm wait command-executed --command-id ${{ env.command_id}} --instance-id ${{ secrets.INSTANCE_ID_2 }}
          
          for instance_id in "${{ secrets.INSTANCE_ID_1 }}" "${{ secrets.INSTANCE_ID_2 }}"; do
            status=$(aws ssm list-command-invocations \
              --command-id ${{ env.command_id}} \
              --instance-id $instance_id \
              --query "CommandInvocations[0].Status" \
              --output text)
            echo "Instance $instance_id status: $status"
            if [ "$status" != "Success" ]; then
              echo "Fetching command invocation details for instance $instance_id"
              aws ssm list-command-invocations \
                --command-id ${{ env.command_id}} \
                --instance-id $instance_id \
                --details \
                --output json | jq -r '.CommandInvocations[0].CommandPlugins[].Output'
              echo "Command failed on instance $instance_id"
              exit 1
            fi
          done
          echo "Command executed successfully on all instances"
