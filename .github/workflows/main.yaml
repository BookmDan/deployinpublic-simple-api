name: Deploy
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v2    
        - name: Configure AWS Credentials 
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
          with:
            region: ${{ secrets.AWS_REGION }}
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        - name: Build and Push Image to ECR
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            echo "ECR_REGISTRY=${ECR_REGISTRY}"
            echo "ECR_REPOSITORY=${ECR_REPOSITORY}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps: 
        - name: Configure AWS Credentials 
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
          with:
            region: ${{ secrets.AWS_REGION }}
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        - name: Deploy to EC2
          run: |
            ecr_registry="${{ steps.login-aws-ecr.outputs.registry }}"
            ecr_repository="${{ secrets.AWS_ECR_REPO }}"
            image_tag="latest"
            image="$ecr_registry/$ecr_repository:$image_tag"
            command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{secrets.INSTANCE_ID_1}},${{secrets.INSTANCE_ID_2}}" \
            --comment "Pull Docker image and run it" \
            --parameters commands='[
              "echo Logging into ECR",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ecr_registry",
              "echo Stopping existing Docker container",
              "docker stop api || true",
              "docker rm api || true",
              "echo Pulling Docker image",
              "docker pull ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}",
              "echo Running Docker container",
              "docker run -d -p 3000:3000 --name api ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}"
              ]' \
            --query 'Command.CommandId' \
            --output text)
            echo "Command ID: $command_id"
            aws ssm wait command-executed \
            --command-id $command_id \
            --instance-id ${{secrets.INSTANCE_ID_1}} || true 
            aws ssm wait command-executed \
            --command-id $command_id \
            --instance-id ${{secrets.INSTANCE_ID_2}} || true 
            for instance_id in  ${{secrets.INSTANCE_ID_1}} ${{secrets.INSTANCE_ID_2}}; do
              status=$(aws ssm list-command-invocations \
              --command-id $command_id \
              --instance-id $instance_id \
              --query "CommandInvocations[0].Status" \
              --output text)
              echo "Instance $instance_id status: $status"
              if [ "$status" != "Success" ]; then
                echo "Fetching command invocation details for instance $instance_id"
                aws ssm list-command-invocations \
                  --command-id $command_id \
                  --instance-id $instance_id \
                  --details \
                  --output json | jq -r '.CommandInvocations[0].CommandPlugins[].Output'
                echo "Command failed on instance $instance_id"
                exit 1
              fi
            done
            echo "Command executed successfully on all instances"